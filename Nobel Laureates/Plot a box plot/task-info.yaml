type: edu
files:
  - name: main.py
    visible: true
    text: |
      import pandas as pd
      import os
      import requests
      import sys
      import re
      
      
      if __name__ == '__main__':
          if not os.path.exists('../Data'):
              os.mkdir('../Data')
      
          # Download data if it is unavailable.
          if 'Nobel_laureates.json' not in os.listdir('../Data'):
              sys.stderr.write("[INFO] Dataset is loading.\n")
              url = "https://www.dropbox.com/s/m6ld4vaq2sz3ovd/nobel_laureates.json?dl=1"
              r = requests.get(url, allow_redirects=True)
              open('../Data/Nobel_laureates.json', 'wb').write(r.content)
              sys.stderr.write("[INFO] Loaded.\n")
      
          # write your code here
      df = pd.read_json('../Data/Nobel_laureates.json')
      
      df = df.dropna(subset=['gender'])
      
      def extract_country(place):
          if pd.isna(place) or ',' not in place:
              return None
          parts = place.split(',')
          return parts[-1].strip()
      
      # Apply the function to the place_of_birth column
      df['extracted_country'] = df['place_of_birth'].apply(extract_country)
      
      # Fill missing values in born_in with the extracted country
      df['born_in'] = df['born_in'].where(df['born_in'] != '', df['extracted_country'])
      
      # Drop rows where born_in is still empty
      df.dropna(subset=['born_in'], inplace=True)
      
      # Standardize country names
      df['born_in'] = df['born_in'].replace({
          'US': 'USA',
          'United States': 'USA',
          'U.S.': 'USA',
          'United Kingdom': 'UK'
      })
      
      # Reset the DataFrame index
      df.reset_index(drop=True, inplace=True)
      
      def extract_year_of_birth(dob):
          if pd.isna(dob):
              return None
          year_search = re.search(r'\b(1[89]\d{2}|20[01]\d)\b', dob)
          if year_search:
              return int(year_search.group(0))
          return None
      
      # Apply the function to create a new column for the year of birth
      df['year_born'] = df['date_of_birth'].apply(extract_year_of_birth)
      
      # Calculate the age of winning the Nobel Prize
      df['age_of_winning'] = df.apply(lambda row: (row['year'] - row['year_born']) if not pd.isna(row['year_born']) else None, axis=1)
      
      # Remove entries with missing 'year_born' or 'age_of_winning'
      df.dropna(subset=['year_born', 'age_of_winning'], inplace=True)
      
      # Convert 'year_born' and 'age_of_winning' to integers (cleaning NaN and converting float to int)
      df['year_born'] = df['year_born'].astype(int)
      df['age_of_winning'] = df['age_of_winning'].astype(int)
      
      # Output the lists of year born and age of winning
      year_born_list = df['year_born'].tolist()
      age_of_winning_list = df['age_of_winning'].tolist()
      
      print(year_born_list)
      print(age_of_winning_list)
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      import numpy
      import pandas
      from hstest import PlottingTest, WrongAnswer, dynamic_test, TestedProgram, CheckResult
      
      data_CORRECT = {
          "categories": ['Chemistry', 'Economics', 'Literature', 'Peace',
                         'Physics', 'Physiology or Medicine', 'All categories'],
      }
      
      
      class Box(PlottingTest):
          # hs-test-python is not able to test box plots properly yet
          # so for now this test program checks whether user showed one plot and whether its type == "box"
      
          @dynamic_test
          def test(self):
              pr = TestedProgram()
              pr.start()
      
              all_figures = self.all_figures()
      
              if len(all_figures) == 0:
                  raise WrongAnswer("Looks like you didn't present any plots")
              if len(all_figures) != 1:
                  raise WrongAnswer(f"Expected one box plot of age distribution across Nobel prize categories.\n"
                                    f"Found {len(all_figures)} plots.")
      
              graph_type = all_figures[0].type
              if graph_type != "box":
                  raise WrongAnswer(f"The type of the plot is wrong.\n"
                                    f"The box plot is expected, found {graph_type} plot.")
      
              if all_figures[0].kwargs.get('labels') is None:
                  raise WrongAnswer("Please define labels!")
              try:
                  if not set(all_figures[0].kwargs.get("labels")) == set(data_CORRECT['categories']):
                      raise WrongAnswer(
                          f"The labels for the 'categories' are wrong. They should be '{data_CORRECT['categories']}'!")
              except TypeError:
                  raise WrongAnswer("The labels type is not hashable.")
      
              if not all_figures[0].kwargs.get("showmeans"):
                  raise WrongAnswer("The 'showmeans' parameter is not defined or wrong!")
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          Box().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import Box
      
      if __name__ == '__main__':    Box().run_tests()
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/23843#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 08 May 2024 05:34:55 UTC"
record: -1
