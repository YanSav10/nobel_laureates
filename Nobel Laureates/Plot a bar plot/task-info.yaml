type: edu
files:
  - name: main.py
    visible: true
    text: |
      import pandas as pd
      import os
      import requests
      import sys
      import re
      
      
      if __name__ == '__main__':
          if not os.path.exists('../Data'):
              os.mkdir('../Data')
      
          # Download data if it is unavailable.
          if 'Nobel_laureates.json' not in os.listdir('../Data'):
              sys.stderr.write("[INFO] Dataset is loading.\n")
              url = "https://www.dropbox.com/s/m6ld4vaq2sz3ovd/nobel_laureates.json?dl=1"
              r = requests.get(url, allow_redirects=True)
              open('../Data/Nobel_laureates.json', 'wb').write(r.content)
              sys.stderr.write("[INFO] Loaded.\n")
      
          # write your code here
      df = pd.read_json('../Data/Nobel_laureates.json')
      
      df = df.dropna(subset=['gender'])
      
      def extract_country(place):
          if pd.isna(place) or ',' not in place:
              return None
          parts = place.split(',')
          return parts[-1].strip()
      
      # Apply the function to the place_of_birth column
      df['extracted_country'] = df['place_of_birth'].apply(extract_country)
      
      # Fill missing values in born_in with the extracted country
      df['born_in'] = df['born_in'].where(df['born_in'] != '', df['extracted_country'])
      
      # Drop rows where born_in is still empty
      df.dropna(subset=['born_in'], inplace=True)
      
      # Standardize country names
      df['born_in'] = df['born_in'].replace({
          'US': 'USA',
          'United States': 'USA',
          'U.S.': 'USA',
          'United Kingdom': 'UK'
      })
      
      # Reset the DataFrame index
      df.reset_index(drop=True, inplace=True)
      
      def extract_year_of_birth(dob):
          if pd.isna(dob):
              return None
          year_search = re.search(r'\b(1[89]\d{2}|20[01]\d)\b', dob)
          if year_search:
              return int(year_search.group(0))
          return None
      
      # Apply the function to create a new column for the year of birth
      df['year_born'] = df['date_of_birth'].apply(extract_year_of_birth)
      
      # Calculate the age of winning the Nobel Prize
      df['age_of_winning'] = df.apply(lambda row: (row['year'] - row['year_born']) if not pd.isna(row['year_born']) else None, axis=1)
      
      # Remove entries with missing 'year_born' or 'age_of_winning'
      df.dropna(subset=['year_born', 'age_of_winning'], inplace=True)
      
      # Convert 'year_born' and 'age_of_winning' to integers (cleaning NaN and converting float to int)
      df['year_born'] = df['year_born'].astype(int)
      df['age_of_winning'] = df['age_of_winning'].astype(int)
      
      # Output the lists of year born and age of winning
      year_born_list = df['year_born'].tolist()
      age_of_winning_list = df['age_of_winning'].tolist()
      
      print(year_born_list)
      print(age_of_winning_list)
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      from hstest import PlottingTest, WrongAnswer, dynamic_test, TestedProgram, CheckResult
      
      dict_img1_data_CORRECT = {
          "male_yaxis": [194, 69, 107, 78, 218, 198],
          "female_yaxis": [4, 1, 15, 14, 4, 13],
          "label_male": "Males",
          "label_female": "Females",
          "color_male": "blue",
          "color_female": "crimson",
          "width": 0.4,
      }
      
      
      class Bar(PlottingTest):
      
          @dynamic_test
          def test(self):
              pr = TestedProgram()
              pr.start()
      
              all_figures = self.all_figures()
              if len(all_figures) == 0:
                  raise WrongAnswer("Looks like you didn't present any plots")
              if len(all_figures) != 2:
                  raise WrongAnswer(f"Expected one image of gender distribution across Nobel prize categories")
              graph1_type, graph2_type = all_figures[0].type, all_figures[1].type
      
              if graph1_type != "bar" or graph2_type != "bar":
                  raise WrongAnswer("The type of the graph is wrong. The bar plot is expected.")
      
              graph1_data_x, graph1_data_y = all_figures[0].data.x.tolist(), all_figures[0].data.y.tolist()
              graph2_data_x, graph2_data_y = all_figures[1].data.x.tolist(), all_figures[1].data.y.tolist()
      
              if not set(graph1_data_y) == set(dict_img1_data_CORRECT["male_yaxis"]):
                  raise WrongAnswer(
                      "Wrong y-axis data. The values for male Nobel laureates are wrong!")
      
              if not set(graph2_data_y) == set(dict_img1_data_CORRECT["female_yaxis"]):
                  raise WrongAnswer(
                      "Wrong y-axis data. The values for female Nobel laureates are wrong!")
      
              if not all_figures[0].kwargs.get("label"):
                  raise WrongAnswer("Please define 'label' parameter for the 'Males'!")
              elif not all_figures[0].kwargs.get("label") == dict_img1_data_CORRECT["label_male"]:
                  raise WrongAnswer(f"The 'label' for the 'Males' is wrong. Make sure it is used for the first group!")
      
              if not all_figures[1].kwargs.get("label"):
                  raise WrongAnswer("Please define 'label' parameter for the 'Females'!")
              elif not all_figures[1].kwargs.get("label") == dict_img1_data_CORRECT["label_female"]:
                  raise WrongAnswer(f"The 'label' for the 'Females' is wrong. Make sure it is used for the second group!")
      
              if not all_figures[0].kwargs.get("color"):
                  raise WrongAnswer("Please define 'color' parameter for the 'Males'!")
              elif not all_figures[0].kwargs.get("color") == dict_img1_data_CORRECT["color_male"]:
                  raise WrongAnswer(f"The 'color' for the 'Males' should be '{dict_img1_data_CORRECT['color_male']}'!")
      
              if not all_figures[1].kwargs.get("color"):
                  raise WrongAnswer("Please define 'color' parameter for the 'Females'!")
              elif not all_figures[1].kwargs.get("color") == dict_img1_data_CORRECT["color_female"]:
                  raise WrongAnswer(f"The 'color' for the 'Females' should be '{dict_img1_data_CORRECT['color_female']}'!")
      
              if not all_figures[0].kwargs.get("width"):
                  raise WrongAnswer("Please define 'width' parameter for the 'Males'!")
              elif not all_figures[0].kwargs.get("width") == dict_img1_data_CORRECT["width"]:
                  raise WrongAnswer(f"The 'width' for the 'Males' should be '{dict_img1_data_CORRECT['width']}'!")
      
              if not all_figures[1].kwargs.get("width"):
                  raise WrongAnswer("Please define 'width' parameter for the 'Females'!")
              elif not all_figures[1].kwargs.get("width") == dict_img1_data_CORRECT["width"]:
                  raise WrongAnswer(f"The 'width' for the 'Females' should be '{dict_img1_data_CORRECT['width']}'!")
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          Bar().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import Bar
      
      if __name__ == '__main__':    Bar().run_tests()
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/23842#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 07 May 2024 08:02:01 UTC"
record: 5
