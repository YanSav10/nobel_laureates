type: edu
files:
  - name: main.py
    visible: true
    text: |
      import pandas as pd
      import os
      import requests
      import sys
      import re
      
      
      if __name__ == '__main__':
          if not os.path.exists('../Data'):
              os.mkdir('../Data')
      
          # Download data if it is unavailable.
          if 'Nobel_laureates.json' not in os.listdir('../Data'):
              sys.stderr.write("[INFO] Dataset is loading.\n")
              url = "https://www.dropbox.com/s/m6ld4vaq2sz3ovd/nobel_laureates.json?dl=1"
              r = requests.get(url, allow_redirects=True)
              open('../Data/Nobel_laureates.json', 'wb').write(r.content)
              sys.stderr.write("[INFO] Loaded.\n")
      
          # write your code here
      df = pd.read_json('../Data/Nobel_laureates.json')
      
      df = df.dropna(subset=['gender'])
      
      def extract_country(place):
          if pd.isna(place) or ',' not in place:
              return None
          parts = place.split(',')
          return parts[-1].strip()
      
      # Apply the function to the place_of_birth column
      df['extracted_country'] = df['place_of_birth'].apply(extract_country)
      
      # Fill missing values in born_in with the extracted country
      df['born_in'] = df['born_in'].where(df['born_in'] != '', df['extracted_country'])
      
      # Drop rows where born_in is still empty
      df.dropna(subset=['born_in'], inplace=True)
      
      # Standardize country names
      df['born_in'] = df['born_in'].replace({
          'US': 'USA',
          'United States': 'USA',
          'U.S.': 'USA',
          'United Kingdom': 'UK'
      })
      
      # Reset the DataFrame index
      df.reset_index(drop=True, inplace=True)
      
      def extract_year_of_birth(dob):
          if pd.isna(dob):
              return None
          year_search = re.search(r'\b(1[89]\d{2}|20[01]\d)\b', dob)
          if year_search:
              return int(year_search.group(0))
          return None
      
      # Apply the function to create a new column for the year of birth
      df['year_born'] = df['date_of_birth'].apply(extract_year_of_birth)
      
      # Calculate the age of winning the Nobel Prize
      df['age_of_winning'] = df.apply(lambda row: (row['year'] - row['year_born']) if not pd.isna(row['year_born']) else None, axis=1)
      
      # Remove entries with missing 'year_born' or 'age_of_winning'
      df.dropna(subset=['year_born', 'age_of_winning'], inplace=True)
      
      # Convert 'year_born' and 'age_of_winning' to integers (cleaning NaN and converting float to int)
      df['year_born'] = df['year_born'].astype(int)
      df['age_of_winning'] = df['age_of_winning'].astype(int)
      
      # Output the lists of year born and age of winning
      year_born_list = df['year_born'].tolist()
      age_of_winning_list = df['age_of_winning'].tolist()
      
      print(year_born_list)
      print(age_of_winning_list)
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      from inspect import isfunction
      
      from hstest import PlottingTest, WrongAnswer, dynamic_test, TestedProgram, CheckResult
      
      dict_data_CORRECT = {
          "countries": ['other countries', 'usa', 'germany', 'uk', 'france', 'russia', 'austria', 'canada', 'poland'],
          "count": [343, 237, 98, 91, 43, 32, 26, 26, 25],
          "colors": ['blue', 'orange', 'red', 'yellow', 'green', 'pink', 'brown', 'cyan', 'purple'],
          "autopct": "fsdf",
          "counterclock": True,
          "explode": [0, 0, 0, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08],
      }
      
      
      class Pie(PlottingTest):
      
          @dynamic_test
          def test(self):
              pr = TestedProgram()
              pr.start()
              all_figures = self.all_figures()
              if len(all_figures) == 0:
                  raise WrongAnswer("Looks like you didn't present any plots")
              if len(all_figures) != 1:
                  raise WrongAnswer(f"Expected one pie plot of Nobel laureates countries distribution, "
                                    f"found {len(all_figures)} plots.")
              graph_type = all_figures[0].type
      
              if graph_type != "pie":
                  raise WrongAnswer(f"The type of the first plot is wrong.\n"
                                    f"The pie plot is expected, found {graph_type} plot.")
      
              graph_data_countries = all_figures[0].data.x.tolist()
      
              try:
                  graph_data_countries = [x.lower() for x in graph_data_countries]
              except:
                  raise WrongAnswer("Didn't find names of the countries in the plot.")
      
              graph_data_count = all_figures[0].data.y.tolist()
      
              if "other countries" not in graph_data_countries:
                  raise WrongAnswer("Didn't find \"Other countries\" category in the pie plot.\n"
                                    "Please refer to the objective #1 in the stage description.")
              if not set(graph_data_countries) == set(dict_data_CORRECT["countries"]):
                  raise WrongAnswer(f"The list of the countries presented in the pie plot is wrong.\n"
                                    f"Expected:\n{dict_data_CORRECT['countries']}\n"
                                    f"Found: \n{graph_data_countries}")
      
              if not set(graph_data_count) == set(dict_data_CORRECT["count"]):
                  raise WrongAnswer("Distribution of countries displayed in the pie plot is wrong")
      
              if not all_figures[0].kwargs.get("colors"):
                  raise WrongAnswer("Please define 'colors' parameter!")
              elif not set(all_figures[0].kwargs.get("colors")) == set(dict_data_CORRECT["colors"]):
                  raise WrongAnswer("The 'colors' in the pie plot are wrong!")
      
              if not all_figures[0].kwargs.get("autopct"):
                  raise WrongAnswer("The 'autopct' parameter is not defined!")
              elif not isfunction(all_figures[0].kwargs.get("autopct")):
                  raise WrongAnswer("The 'autopct' parameter is not a function!")
      
              if not all_figures[0].kwargs.get("explode"):
                  raise WrongAnswer("Please define 'explode' parameter!")
              elif not set(all_figures[0].kwargs.get("explode")) == set(dict_data_CORRECT["explode"]):
                  raise WrongAnswer("The 'explode' values in the pie plot are wrong!")
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          Pie().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import Pie
      
      if __name__ == '__main__':    Pie().run_tests()
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/23841#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 02 May 2024 10:03:16 UTC"
record: 4
